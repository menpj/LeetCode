#import operator
from collections import OrderedDict
class Solution(object):
    def groupAnagrams(self, strs):
        """
        :type strs: List[str]
        :rtype: List[List[str]]
        """
        #popcount=0
        empty_group=[]
        map={}
        for i in strs:
            #if i=="":

            map[i]=''.join(sorted(i))
            
        #print(map)
        #map=dict(sorted(map.items(),key=lambda item:item[1]))
        #sorted_dict = dict(sorted(map.items(), key=operator.itemgetter(1)))
        map = OrderedDict(sorted(map.items(), key=lambda item: item[1]))
        #print(sorted_dict)
        print(map)
        grouplist=[]
        subgroup=[]
        curr=None
        for i in map:
            
            if curr==map[i]:
                subgroup.append(i)
                
            else:
                if subgroup:
                    #print(subgroup)
                    grouplist.append(subgroup)   
                subgroup=[]
                
                subgroup.append(i)
            #print(i+":" + map[i])
            curr=map[i]
        if subgroup:
            grouplist.append(subgroup)
            
        #print(grouplist)
        return grouplist