#71. Simplify Path

class Solution(object):
    def simplifyPath(self, path):
        """
        :type path: str
        :rtype: str
        """
        path_stack=[]
        #re.sub
        s=""
        for i in path:
            if i=='/' and s:
                path_stack.append(s)
                s=""
            elif i=='/':
                pass
    
            else:
                s=s+i
        if s:
            path_stack.append(s)
        print(path_stack)
        pop_count=0
        #length=len(path_stack)
        for i in range(len(path_stack)):
        
            
            
            
            if (i+1-pop_count)<len(path_stack) and path_stack[i+1-pop_count]=='..':
                #print(f"gonna be deleetd {path_stack[i-pop_count]}")
                path_stack[i-pop_count]=None
                path_stack[i+1-pop_count]=None
                #print(f"gonna be deleetd {path_stack[i-pop_count]}")
                #del(path_stack[i-pop_count])
                #pop_count+=1
                print("\nrandom")
                print(path_stack)
                
            elif (i+1-pop_count)<len(path_stack) and path_stack[i+1-pop_count]=='.':
                print("\nrandom2")
                path_stack[i+1-pop_count]=None
                #pop_count+=1
            elif (i-pop_count)<len(path_stack) and path_stack[i-pop_count]=='..':
                print("\nenetered")
                path_stack[i-pop_count]=None
                #pop_count+=1
            
            
        
        print(path_stack)
        s=""
        for i in path_stack:
            if i:
                s=s+"/"+i
            
        if not s:
            s="/"
        print(s)
        return s
            
                
                
        
        
def main():
    solution = Solution()
    path=input("Enter the string path: ")
    solution.simplifyPath(path)

main()